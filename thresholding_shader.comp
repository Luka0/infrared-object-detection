#version 430 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(rgba8, binding = 1) uniform image2D output_texture;

int countSurroundingWarmPixels(ivec2 texel_coord, ivec2 image_size) {
	ivec2 detection_size = ivec2(25, 25);
	int counter = 0;
	ivec2 current_coord;
	float cutoff = 0.75;

	for (int i = -detection_size.x/2; i <= detection_size.x/2; i++) {
		for (int j = -detection_size.y/2; j <= detection_size.y/2; j++) {
			current_coord.x = texel_coord.x + i;
			current_coord.y = texel_coord.y + j;
			// check if coords are inside the image
			if (texel_coord.x <= image_size.x - 1 && texel_coord.x >= 0 && texel_coord.y <= image_size.y && texel_coord.y >= 0){
				vec4 pixel = imageLoad(output_texture, current_coord);
				if (pixel.r >= cutoff) {
					counter++;
				}
			}
		}
	}
	return counter;
}

vec4 getNewPixel(vec4 old_pixel) {
	vec4 new_pixel;
	float cutoff = 0.75;

	if (old_pixel.r >= cutoff) {
		new_pixel.rgb = vec3(1.0);
	}
	else {
		new_pixel.rgb = vec3(0.0);
	}

	return new_pixel;
}

void main() {
	ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 image_size = imageSize(output_texture);

	// ignore off-screen texels
	if (texel_coord.x >= image_size.x || texel_coord.y >= image_size.y) {
		return;
	}

	// handle current pixel value
	vec4 pixel = imageLoad(output_texture, texel_coord);
	vec4 new_pixel;
	float blue_value = 25*25 / countSurroundingWarmPixels(texel_coord, image_size);
	float green_value = 1 - blue_value;
	if (countSurroundingWarmPixels(texel_coord, image_size) >= 25*25*0.5f) {
		imageStore(output_texture, texel_coord, vec4(pixel.r, green_value, blue_value, 1.0));
	}
	//imageStore(output_texture, texel_coord, getNewPixel(pixel));
}